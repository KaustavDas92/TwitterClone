<?php

namespace App;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use Notifiable,followable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $guarded=[];
//    protected $fillable = [
//        'username','avatar','name', 'email', 'password',
//    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    function getAvatarAttribute($value='')
    {
        //return "https://i.pravatar.cc/300?u=".$this->email;
        return asset($value?'storage/'.$value:'/images/defaultAvatar.jpg');
    }
    function timeline()
    {

        $id=$this->follows->pluck('id');
        //$id->push($this->id);

        return Tweet::whereIn('user_id',$id)
            ->orWhere('user_id',$this->id)
            ->latest()
            ->withLikes()
            ->paginate(10);
            //->get();
    }

    function tweets()
    {
        return $this->hasMany(Tweet::class);
    }
    function follow(User $user)
    {
        return $this->follows()->save($user);
    }
    function follows()
    {
        return $this->belongsToMany(User::class,'follows','user_id','following_user_id');
    }
    function following(User $user)
    {
       return $this->follows()->where('following_user_id',$user->id)->exists();
    }
    function unfollow(User $user)
    {
        return $this->follows()->detach($user);
    }

    function path($append='')
    {
        $path =route('profile',$this);

        return $append? "{$path}/{$append}":$path;
    }

    function setPasswordAttribute($value)
    {
        $this->attributes['password']=bcrypt($value);
    }
//    public function getRouteKeyName()
//    {
//        return 'name'; // TODO: Change the autogenerated stub
//    }
}
